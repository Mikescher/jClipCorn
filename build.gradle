apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
	mavenCentral()

	flatDir { dirs 'lib' }
}

sourceSets {
	main {
		java { srcDirs = ['src/main'] }
		resources { srcDirs = ['res'] }
	}

	test {
		java { srcDirs = ['src/test'] }
		resources { srcDirs = [ 'res', 'testres' ] }
	}
}

test {
	testLogging {
		events 'passed', "skipped", "failed"
		exceptionFormat = 'full'
	}
}

project.ext {
	appmain    = 'de.jClipCorn.Main'

	appversion = {->
		def text = file('src/main/de/jClipCorn/Main.java').text
		def extract = {-> text.replaceAll(/(?s)^.*public\s+(final\s+)?(static\s+)?(final\s+)?String\s+VERSION\s*=\s*\"([0-9\.]+)\";.*$/, '$4') }
		def isbeta  = {-> text.replaceAll(/(?s)^.*public\s+(final\s+)?(static\s+)?(final\s+)?boolean\s+BETA\s*=\s*([A-Za-z]+)\s*;.*$/, '$4') == "true" }
		extract() + (isbeta() ? ("-beta") : (""))
	}()

	appname    = 'jClipCorn'
}

version = project.appversion
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = project.appmain

compileJava.options.encoding = 'UTF-8'

jar {
	manifest {
		attributes 'Implementation-Title':   project.appname,  
				   'Implementation-Version': project.version,
				   'Main-Class':             project.appmain
	}

	baseName = project.appname
	version = project.appversion
}

task fatJar(type: Jar) { //  ->  file ends up in ./build/libs/smth.jar
	manifest {
		attributes 'Implementation-Title':   project.appname,  
				   'Implementation-Version': project.version,
				   'Main-Class':             project.appmain
	}

	baseName = project.appname + '_fat'
	version  = project.appversion

	archiveName = "${baseName} ${version}.${extension}"

	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task releaseJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title':   project.appname,  
				   'Implementation-Version': project.version,
				   'Main-Class':             project.appmain
	}

	baseName       = project.appname
	version        = project.appversion
	destinationDir = file("$rootDir/mybuilds")
	archiveName    = "${baseName} ${version}.${extension}"

	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task changelog << {
	def log = ['git', 'log', "--format=%H_____INNERDEL_____%ad_____INNERDEL_____%B_____OUTERDELIM_____"].execute().text.trim().split('_____OUTERDELIM_____')

	File file = new File("CHANGELOG.txt")
	file.text = ""

	def lastRelease = ""

	log.each 
	{ 
		def (partHash, partDate, partMessage) = "${it}".split('_____INNERDEL_____')

		partHash = partHash.trim()
		partDate = partDate.trim()
		partMessage = partMessage.trim()

		def isNormal = partMessage.find(/(?i)^[0-9]+\.[0-9]+(\.[0-9]+)?(\.[0-9]+)?\s+((Big|Possible) )?(WIP\-)?(Fixes( and Tasks)?|Libraryfix|Glitchfix|Code Cleanup|Documentation|Changelog|Tasks?|Features?|(Emergency\-)?Bugfixe?s?|Updates?|Rea?leases?|Others?|Features\+Bugfix)[ \r\n\t\s:]/)
		def isRelease = partMessage.find(/(?i)^[0-9]+\.[0-9]+(\.[0-9]+)?\s+Rea?leases?/) && (partMessage.split('\n').getAt(0).trim().split(' ').getAt(0).trim() != lastRelease.trim())

		partMessage = partMessage.replaceAll('\r\n', '\n')                     // normalize linebreaks
		partMessage = partMessage.replaceAll(/\n\n+/, '\n')                    // remove empty lines
		partMessage = partMessage.replaceAll(/^1\.10\.10/, '1.10.0')           // fix misspelling
		partMessage = partMessage.replaceAll(/\n(?=[^ ])/, '\n  ')             // indent info lines

		partMessage = partMessage.replace('Emergency-Bugfix', 'Bugfix')        // word replacement
		partMessage = partMessage.replace('Libraryfix', 'Bugfix')              // word replacement
		partMessage = partMessage.replace('Glitchfix', 'Bugfix')               // word replacement
		partMessage = partMessage.replace('Code Cleanup', 'Other')             // word replacement
		partMessage = partMessage.replace('Documentation', 'Other')            // word replacement
		partMessage = partMessage.replace('Changelog', 'Other')                // word replacement
		partMessage = partMessage.replace('Changelog', 'Other')                // word replacement

		if (isRelease)
		{
			def partMessageHeader = partMessage.split('\n').getAt(0).trim()
			file << "\n\n"
			file << ("#" * (12 + 1 + partDate.size() + 2 + partMessageHeader.size() + 1 + 12))
			file << "\n"
			file << "############ ${partDate}  ${partMessageHeader} ############\n"
			file << ("#" * (12 + 1 + partDate.size() + 2 + partMessageHeader.size() + 1 + 12))
			file << "\n\n\n"

			if (partMessage.split('\n').size() > 1) 
			{
				file << "${partMessage}\n"
			}

			lastRelease = partMessageHeader.split(' ').getAt(0).trim()
		} 
		else if (isNormal) 
		{
			file << "${partMessage}\n"
		} 
		else 
		{
			println "IGNORE: " + partMessage.replaceAll('\r', '').replaceAll('\n', ' ')
		}
	}
}

configurations {
	all*.transitive = false

	runtime.exclude group: 'commons-beanutils'
	compile.exclude group: 'commons-beanutils'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

//=====================================================================================================================

dependencies {
	compile 'commons-betwixt:commons-betwixt:0.8'
	compile 'commons-collections:commons-collections:3.2.1'
	compile 'commons-digester:commons-digester:2.1'
	compile 'commons-lang:commons-lang:2.6'
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'commons-codec:commons-codec:1.10'
	compile 'commons-io:commons-io:2.4'
	compile 'commons-logging:commons-logging:1.2'
	compile name: 'commons-beanutils-1.8.3-custombuild'

	compile 'org.xerial:sqlite-jdbc:3.8.11.2'

	compile 'org.apache.derby:derby:10.10.1.1'
	compile 'org.apache.ddlutils:ddlutils:1.0'

	compile 'org.jdom:jdom2:2.0.6'
	compile 'org.json:json:20151123'
	compile 'org.jsoup:jsoup:1.8.3'

	compile 'com.github.insubstantial:substance:7.3'
	compile 'com.github.insubstantial:laf-plugin:7.3'
	compile 'com.github.insubstantial:laf-widget:7.3'
	compile 'com.github.insubstantial:trident:7.3'

	compile 'org.jfree:jfreechart:1.0.19'
	compile 'org.jfree:jcommon:1.0.23'

	compile 'com.jgoodies:jgoodies-forms:1.9.0'
	compile 'com.jgoodies:jgoodies-common:1.8.1'
	compile name: 'jsplitbutton-1.2'

	compile name: 'fast-md5'

	compile 'net.sourceforge.htmlunit:htmlunit:2.19'
	compile 'net.sourceforge.cssparser:cssparser:0.9.18'
	compile 'net.sourceforge.htmlunit:htmlunit-core-js:2.17'
	compile 'com.hynnet:httpclient:4.5.1'
	compile 'org.apache.httpcomponents:httpmime:4.5.1'
	compile 'net.sourceforge.nekohtml:nekohtml:1.9.22'
	compile 'org.eclipse.jetty.websocket:websocket-client:9.2.13.v20150730'
	compile 'xalan:xalan:2.7.2'
	compile 'xerces:xercesImpl:2.11.0'
	compile 'org.apache.httpcomponents:httpcore:4.4.3'
	compile 'org.eclipse.jetty:jetty-util:9.2.13.v20150730'
	compile 'org.eclipse.jetty:jetty-io:9.2.13.v20150730'
	compile 'xalan:serializer:2.7.2'
	compile 'org.eclipse.jetty.websocket:websocket-api:9.2.13.v20150730'
	compile 'org.eclipse.jetty.websocket:websocket-common:9.2.13.v20150730'
	compile 'xml-apis:xml-apis:1.4.01'
	compile 'org.w3c.css:sac:1.3'

	compile 'junit:junit:4.12'
	compile 'org.hamcrest:hamcrest-core:1.3'
}

apply from: 'eclipse_config.gradle'