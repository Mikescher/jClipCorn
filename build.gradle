buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.ben-manes:gradle-versions-plugin:0.21.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

apply plugin: "com.github.ben-manes.versions"

apply from: 'build_util.gradle'
  
repositories {
	mavenCentral()

	flatDir { dirs 'lib' }
}

sourceSets {
	main {
		java { srcDirs = ['src/main'] }
		resources { srcDirs = ['res'] }
	}

	test {
		java { srcDirs = ['src/test'] }
		resources { srcDirs = [ 'testres' ] }
	}
}

test {
	testLogging {
		events 'passed', "skipped", "failed"
		exceptionFormat = 'full'
	}
}

project.ext {
	appmain    = 'de.jClipCorn.Main'

	appversion = extractProjectVersion()

	appname    = 'jClipCorn'
}

version = project.appversion
sourceCompatibility = 12
targetCompatibility = 12
mainClassName = project.appmain

compileJava.options.encoding = 'UTF-8'

configurations {
	all*.transitive = false

	runtime.exclude group: 'commons-beanutils'
	compile.exclude group: 'commons-beanutils'
	implementation.exclude group: 'commons-beanutils'
}

//
// Direct Callable:
// ================
// 
// [betaJar]          Used by local - create a new beta version, increment version etc
// [manualReleaseJar] Used by local - create a new release, based on the latest tag version
//
// Other:
// ======
//
// [anyReleaseJar] create release/beta, depending on config in Main.java
// [changelog]     create changelog
//

jar {
	manifest {
		attributes 'Implementation-Title':   project.appname,  
				   'Implementation-Version': project.version,
				   'Main-Class':             project.appmain
	}

	archiveBaseName = project.appname
	archiveVersion  = project.appversion
}

tasks.register("anyReleaseJar", Jar) {
	group = 'Custom'

	manifest {
		attributes 'Implementation-Title':   project.appname,
				   'Implementation-Version': project.version,
				   'Main-Class':             project.appmain
	}

	archiveBaseName      = 'jClipCorn'
	archiveVersion       = extractProjectVersion()
	destinationDirectory = file("$rootDir/mybuilds")
	archiveFileName      = "jClipCorn "+extractProjectVersion()+".jar"

	duplicatesStrategy = 'include'

	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } with jar

	doLast {
		if (! isBetaRelease() /* && Os.isFamily(Os.FAMILY_WINDOWS) */)
		{
			println "Running Launch4j"
			if (new File("launch4j/launch4j.cfg.xml").exists()) new File("launch4j/launch4j.cfg.xml").delete()
			new File('launch4j/launch4j.cfg.xml').write createLaunch4jConfig()

			def stdout = ['java', '-jar', 'launch4j.jar', 'launch4j.cfg.xml'].execute(null, new File("launch4j")).text
			println stdout

			createChangelog()
		}
	}
}





tasks.register("manualReleaseJar") {
	group = 'Custom'

	doLast {
		def tagVersion = ['git', 'describe', "--abbrev=0", "--tags"].execute().text.replaceAll('v', '').trim()

		def mainContent = new File('src/main/de/jClipCorn/Main.java').text
		def currVersion = mainContent.findAll(rexMainVers())[0]

		tagVersion  = make3Dot(tagVersion)
		currVersion = make3Dot(currVersion)

		println "Version (Tag):  " + tagVersion
		println "Version (Code): " + currVersion

		mainContent = mainContent.replaceFirst(rexMainVers(), tagVersion);
		mainContent = mainContent.replaceFirst(rexMainBeta(), "false");

		new File('src/main/de/jClipCorn/Main.java').write mainContent
	}
}
manualReleaseJar.finalizedBy anyReleaseJar


tasks.register("betaJar") {
	group = 'Custom'

	doLast {
		def mainContent = new File('src/main/de/jClipCorn/Main.java').text
		def currVersion = mainContent.findAll(rexMainVers())[0]

		def lastDot = 0
		if (make3Dot(currVersion) != currVersion) lastDot = currVersion.substring(make3Dot(currVersion).length() + 1) as Integer
		def newVersion = make3Dot(currVersion) + "." + (lastDot + 1);

		println("")
		println("Update version from " + currVersion + " to " + newVersion)
		println("Setting BETA flag from " + isBetaRelease() + " to true")
		println("")

		mainContent = mainContent.replaceFirst(rexMainVers(), newVersion);
		mainContent = mainContent.replaceFirst(rexMainBeta(), "true");

		new File('src/main/de/jClipCorn/Main.java').write mainContent

		project.appversion = extractProjectVersion()
		version = extractProjectVersion()
		anyReleaseJar.version = extractProjectVersion()
		anyReleaseJar.archiveName = "${anyReleaseJar.baseName} ${anyReleaseJar.version}.${anyReleaseJar.extension}"
	}
}

betaJar.finalizedBy anyReleaseJar

tasks.register("changelog") {
	group = 'Custom'

	doLast {
		createChangelog()
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

//=====================================================================================================================

dependencies {
	implementation 'commons-betwixt:commons-betwixt:0.8'
	implementation 'commons-collections:commons-collections:3.2.1'
	implementation 'commons-digester:commons-digester:2.1'
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'org.apache.commons:commons-lang3:3.9'
	implementation 'org.apache.commons:commons-text:1.6'
	implementation 'commons-codec:commons-codec:1.10'
	implementation 'commons-io:commons-io:2.6'
	implementation 'commons-logging:commons-logging:1.2'
	implementation name: 'commons-beanutils-1.8.3-custombuild'

	implementation 'org.xerial:sqlite-jdbc:3.27.2.1'

	implementation 'org.jdom:jdom2:2.0.6'
	implementation 'org.json:json:20180813'
	implementation 'org.jsoup:jsoup:1.12.1'

	implementation 'org.jfree:jfreechart:1.5.0'
	implementation 'org.jfree:jcommon:1.0.24'

	implementation 'com.jgoodies:jgoodies-forms:1.9.0'
	implementation 'com.jgoodies:jgoodies-common:1.8.1'
	implementation name: 'jfd-annotations'

	implementation name: 'fast-md5'

	implementation 'org.jetbrains:annotations:20.1.0'

	implementation 'net.sourceforge.htmlunit:htmlunit:2.35.0'
	implementation 'net.sourceforge.cssparser:cssparser:0.9.27'
	implementation 'net.sourceforge.htmlunit:htmlunit-core-js:2.35.0'
	implementation 'com.hynnet:httpclient:4.5.1'
	implementation 'org.apache.httpcomponents:httpmime:4.5.8'
	implementation 'net.sourceforge.nekohtml:nekohtml:1.9.22'
	implementation 'org.eclipse.jetty.websocket:websocket-client:9.4.18.v20190429'
	implementation 'xalan:xalan:2.7.2'
	implementation 'xerces:xercesImpl:2.12.0'
	implementation 'org.apache.httpcomponents:httpcore:4.4.11'
	implementation 'org.eclipse.jetty:jetty-util:9.4.18.v20190429'
	implementation 'org.eclipse.jetty:jetty-io:9.4.18.v20190429'
	implementation 'xalan:serializer:2.7.2'
	implementation 'org.eclipse.jetty.websocket:websocket-api:9.4.18.v20190429'
	implementation 'org.eclipse.jetty.websocket:websocket-common:9.4.18.v20190429'
	implementation 'xml-apis:xml-apis:1.4.01'
	implementation 'org.w3c.css:sac:1.3'


	implementation 'net.java.dev.jna:jna:5.5.0'
	implementation 'net.java.dev.jna:jna-platform:5.5.0'

	implementation 'junit:junit:4.12'
	implementation 'org.hamcrest:hamcrest-core:1.3'

	implementation 'com.formdev:flatlaf:1.0'
	implementation 'org.pushing-pixels:radiance-substance:3.5.1'
	implementation 'org.pushing-pixels:radiance-neon:3.5.1'
	implementation 'org.pushing-pixels:radiance-trident:3.5.1'
}

apply from: 'build_eclipse_config.gradle'