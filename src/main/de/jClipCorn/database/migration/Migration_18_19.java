package de.jClipCorn.database.migration;

import de.jClipCorn.database.driver.GenericDatabase;
import de.jClipCorn.database.history.CCDatabaseHistory;
import de.jClipCorn.features.log.CCLog;
import de.jClipCorn.properties.CCProperties;
import de.jClipCorn.properties.enumerations.CCDatabaseDriver;
import de.jClipCorn.util.Str;
import de.jClipCorn.util.filesystem.FSPath;
import de.jClipCorn.util.stream.CCStreams;

import java.util.ArrayList;
import java.util.List;

public class Migration_18_19 extends DBMigration {

	public Migration_18_19(GenericDatabase db, CCProperties ccprops, FSPath databaseDirectory, String databaseName, boolean readonly) {
		super(db, ccprops, databaseDirectory, databaseName, readonly);
	}

	@Override
	public String getFromVersion() {
		return "18";
	}

	@Override
	public String getToVersion() {
		return "19";
	}

	@Override
	@SuppressWarnings("nls")
	public List<UpgradeAction> migrate() throws Exception {
		CCLog.addInformation("[UPGRADE v18 -> v19] Split table ELEMENTS into MOVIES and SERIES");
		CCLog.addInformation("[UPGRADE v18 -> v19] Fix HISTORY.TABLE column in history after ELEMENTS split");
		CCLog.addInformation("[UPGRADE v18 -> v19] Rename SEASONS.SEASONID to SEASONS.LOCALID");

		if (db.getDBType() != CCDatabaseDriver.SQLITE) throw new Exception("Unsupported DB type"); // from v19 onwards only sqlite is supported

		db.executeSQLThrow("BEGIN TRANSACTION");
		db.executeSQLThrow("PRAGMA foreign_keys = OFF;");
		{
			for (String trigger : CCStreams.iterate(db.listTrigger()).filter(t -> t.startsWith("JCCTRIGGER_"))) db.executeSQLThrow("DROP TRIGGER ["+trigger+"]");

			db.executeSQLThrow("CREATE TABLE MOVIES(LOCALID INTEGER PRIMARY KEY,[NAME] TEXT NOT NULL,VIEWED_HISTORY TEXT NOT NULL,ZYKLUS TEXT NOT NULL,ZYKLUSNUMBER INTEGER NOT NULL,[LANGUAGE] BIGINT NOT NULL,GENRE BIGINT NOT NULL,LENGTH INTEGER NOT NULL,ADDDATE DATE NOT NULL,ONLINESCORE TINYINT NOT NULL,FSK TINYINT NOT NULL,FORMAT TINYINT NOT NULL,MOVIEYEAR SMALLINT NOT NULL,ONLINEREF TEXT NOT NULL,GROUPS TEXT NOT NULL,FILESIZE BIGINT NOT NULL,TAGS SMALLINT NOT NULL,PART1 TEXT NOT NULL,PART2 TEXT NOT NULL,PART3 TEXT NOT NULL,PART4 TEXT NOT NULL,PART5 TEXT NOT NULL,PART6 TEXT NOT NULL,SCORE TINYINT NOT NULL,COVERID INTEGER NOT NULL,[MEDIAINFO.FILESIZE] BIGINT,[MEDIAINFO.CDATE] BIGINT,[MEDIAINFO.MDATE] BIGINT,[MEDIAINFO.AFORMAT] TEXT,[MEDIAINFO.VFORMAT] TEXT,[MEDIAINFO.WIDTH] SMALLINT,[MEDIAINFO.HEIGHT] SMALLINT,[MEDIAINFO.FRAMERATE] REAL,[MEDIAINFO.DURATION] REAL,[MEDIAINFO.BITDEPTH] TINYINT,[MEDIAINFO.BITRATE] INTEGER,[MEDIAINFO.FRAMECOUNT] INTEGER,[MEDIAINFO.ACHANNELS] INTEGER,[MEDIAINFO.VCODEC] TEXT,[MEDIAINFO.ACODEC] TEXT,[MEDIAINFO.SAMPLERATE] INTEGER,[MEDIAINFO.CHECKSUM] TEXT)");
			db.executeSQLThrow("CREATE TABLE SERIES(LOCALID INTEGER PRIMARY KEY,[NAME] TEXT NOT NULL,GENRE BIGINT NOT NULL,ONLINESCORE TINYINT NOT NULL,FSK TINYINT NOT NULL,ONLINEREF TEXT NOT NULL,GROUPS TEXT NOT NULL,SCORE TINYINT NOT NULL,COVERID INTEGER NOT NULL,TAGS SMALLINT NOT NULL)");

			db.executeSQLThrow("INSERT INTO SERIES (LOCALID, [NAME], GENRE, ONLINESCORE, FSK, ONLINEREF, [GROUPS], SCORE, COVERID, TAGS) SELECT LOCALID, [NAME], GENRE, ONLINESCORE, FSK, ONLINEREF, [GROUPS], SCORE, COVERID, TAGS FROM ELEMENTS WHERE ELEMENTS.TYPE = 1");
			db.executeSQLThrow("INSERT INTO MOVIES (LOCALID, [NAME], VIEWED_HISTORY, ZYKLUS, ZYKLUSNUMBER, [LANGUAGE], GENRE, LENGTH, ADDDATE, ONLINESCORE, FSK, FORMAT, MOVIEYEAR, ONLINEREF, GROUPS, FILESIZE, TAGS, PART1, PART2, PART3, PART4, PART5, PART6, SCORE, COVERID, [MEDIAINFO.FILESIZE], [MEDIAINFO.CDATE], [MEDIAINFO.MDATE], [MEDIAINFO.AFORMAT], [MEDIAINFO.VFORMAT], [MEDIAINFO.WIDTH], [MEDIAINFO.HEIGHT], [MEDIAINFO.FRAMERATE], [MEDIAINFO.DURATION], [MEDIAINFO.BITDEPTH], [MEDIAINFO.BITRATE], [MEDIAINFO.FRAMECOUNT], [MEDIAINFO.ACHANNELS], [MEDIAINFO.VCODEC], [MEDIAINFO.ACODEC], [MEDIAINFO.SAMPLERATE], [MEDIAINFO.CHECKSUM]) SELECT LOCALID, [NAME], VIEWED_HISTORY, ZYKLUS, ZYKLUSNUMBER, [LANGUAGE], GENRE, LENGTH, ADDDATE, ONLINESCORE, FSK, FORMAT, MOVIEYEAR, ONLINEREF, GROUPS, FILESIZE, TAGS, PART1, PART2, PART3, PART4, PART5, PART6, SCORE, COVERID, [MEDIAINFO.FILESIZE], [MEDIAINFO.CDATE], [MEDIAINFO.MDATE], [MEDIAINFO.AFORMAT], [MEDIAINFO.VFORMAT], [MEDIAINFO.WIDTH], [MEDIAINFO.HEIGHT], [MEDIAINFO.FRAMERATE], [MEDIAINFO.DURATION], [MEDIAINFO.BITDEPTH], [MEDIAINFO.BITRATE], [MEDIAINFO.FRAMECOUNT], [MEDIAINFO.ACHANNELS], [MEDIAINFO.VCODEC], [MEDIAINFO.ACODEC], [MEDIAINFO.SAMPLERATE], [MEDIAINFO.CHECKSUM] FROM ELEMENTS WHERE ELEMENTS.TYPE = 0");

			var histids = db.querySQL("SELECT [ID] FROM [HISTORY] WHERE [TABLE]='ELEMENTS' GROUP BY [ID]", 1, o -> (String)o[0]);
			for (var hid : histids)
			{
				var type1 = db.querySingleSQL("SELECT [TYPE] FROM [ELEMENTS] WHERE [LOCALID]="+hid, 0);
				if (type1 != null)
				{
					if      (((int)type1) == 0) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='MOVIES' WHERE [ID]='"+hid+"'");
					else if (((int)type1) == 1) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='SERIES' WHERE [ID]='"+hid+"'");
					else throw new Exception("Unknown db-elem-type");
					continue;
				}

				var type2 = db.querySingleSQL("SELECT [NEW] FROM [HISTORY] WHERE [ID]='"+hid+"' AND [NEW] IS NOT NULL AND [FIELD]='TYPE' AND [TABLE]='ELEMENTS' ORDER BY [DATE] DESC LIMIT 1", 0);
				if (type2 != null)
				{
					if      (Str.equals((String) type2, "0")) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='MOVIES' WHERE [ID]='"+hid+"'");
					else if (Str.equals((String) type2, "1")) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='SERIES' WHERE [ID]='"+hid+"'");
					else throw new Exception("Unknown db-elem-type");
					continue;
				}

				var type3 = db.querySingleSQL("SELECT [OLD] FROM [HISTORY] WHERE [ID]='"+hid+"' AND [OLD] IS NOT NULL AND [FIELD]='TYPE' AND [TABLE]='ELEMENTS' ORDER BY [DATE] DESC LIMIT 1", 0);
				if (type3 == null)
					throw new Exception("Could not get type of history-entry '"+hid+"'");

				if      (Str.equals((String) type3, "0")) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='MOVIES' WHERE [ID]='"+hid+"'");
				else if (Str.equals((String) type3, "1")) db.executeSQLThrow("UPDATE [HISTORY] SET [TABLE]='SERIES' WHERE [ID]='"+hid+"'");
				else throw new Exception("Unknown db-elem-type");
			}

			db.executeSQLThrow("DROP TABLE ELEMENTS");

			db.executeSQLThrow("CREATE TABLE _SEASONS(LOCALID INTEGER PRIMARY KEY,SERIESID INTEGER NOT NULL,[NAME] TEXT NOT NULL,SEASONYEAR SMALLINT NOT NULL,COVERID INTEGER NOT NULL,FOREIGN KEY(SERIESID) REFERENCES SERIES(LOCALID))");
			db.executeSQLThrow("INSERT INTO _SEASONS (LOCALID,SERIESID,NAME,SEASONYEAR,COVERID) SELECT SEASONID,SERIESID,NAME,SEASONYEAR,COVERID FROM SEASONS");
			db.executeSQLThrow("DROP TABLE SEASONS");
			db.executeSQLThrow("ALTER TABLE _SEASONS RENAME TO SEASONS");

			db.executeSQLThrow("CREATE TABLE _EPISODES(LOCALID INTEGER PRIMARY KEY,SEASONID INTEGER NOT NULL,EPISODE SMALLINT NOT NULL,[NAME] TEXT NOT NULL,VIEWED_HISTORY TEXT NOT NULL,LENGTH INTEGER NOT NULL,FORMAT TINYINT NOT NULL,FILESIZE BIGINT NOT NULL,PART1 TEXT NOT NULL,TAGS SMALLINT NOT NULL,ADDDATE DATE NOT NULL,[LANGUAGE] BIGINT NOT NULL,[MEDIAINFO.FILESIZE] BIGINT,[MEDIAINFO.CDATE] BIGINT,[MEDIAINFO.MDATE] BIGINT,[MEDIAINFO.AFORMAT] TEXT,[MEDIAINFO.VFORMAT] TEXT,[MEDIAINFO.WIDTH] SMALLINT,[MEDIAINFO.HEIGHT] SMALLINT,[MEDIAINFO.FRAMERATE] REAL,[MEDIAINFO.DURATION] REAL,[MEDIAINFO.BITDEPTH] TINYINT,[MEDIAINFO.BITRATE] INTEGER,[MEDIAINFO.FRAMECOUNT] INTEGER,[MEDIAINFO.ACHANNELS] INTEGER,[MEDIAINFO.VCODEC] TEXT,[MEDIAINFO.ACODEC] TEXT,[MEDIAINFO.SAMPLERATE] INTEGER,[MEDIAINFO.CHECKSUM] TEXT,FOREIGN KEY(SEASONID) REFERENCES SEASONS(LOCALID))");
			db.executeSQLThrow("INSERT INTO _EPISODES (LOCALID,SEASONID,EPISODE,[NAME],VIEWED_HISTORY,LENGTH,FORMAT,FILESIZE,PART1,TAGS,ADDDATE,[LANGUAGE],[MEDIAINFO.FILESIZE],[MEDIAINFO.CDATE],[MEDIAINFO.MDATE],[MEDIAINFO.AFORMAT],[MEDIAINFO.VFORMAT],[MEDIAINFO.WIDTH],[MEDIAINFO.HEIGHT],[MEDIAINFO.FRAMERATE],[MEDIAINFO.DURATION],[MEDIAINFO.BITDEPTH],[MEDIAINFO.BITRATE],[MEDIAINFO.FRAMECOUNT],[MEDIAINFO.ACHANNELS],[MEDIAINFO.VCODEC],[MEDIAINFO.ACODEC],[MEDIAINFO.SAMPLERATE],[MEDIAINFO.CHECKSUM]) SELECT LOCALID,SEASONID,EPISODE,[NAME],VIEWED_HISTORY,LENGTH,FORMAT,FILESIZE,PART1,TAGS,ADDDATE,[LANGUAGE],[MEDIAINFO.FILESIZE],[MEDIAINFO.CDATE],[MEDIAINFO.MDATE],[MEDIAINFO.AFORMAT],[MEDIAINFO.VFORMAT],[MEDIAINFO.WIDTH],[MEDIAINFO.HEIGHT],[MEDIAINFO.FRAMERATE],[MEDIAINFO.DURATION],[MEDIAINFO.BITDEPTH],[MEDIAINFO.BITRATE],[MEDIAINFO.FRAMECOUNT],[MEDIAINFO.ACHANNELS],[MEDIAINFO.VCODEC],[MEDIAINFO.ACODEC],[MEDIAINFO.SAMPLERATE],[MEDIAINFO.CHECKSUM] FROM EPISODES");
			db.executeSQLThrow("DROP TABLE EPISODES");
			db.executeSQLThrow("ALTER TABLE _EPISODES RENAME TO EPISODES");


			if (db.querySingleStringSQL("SELECT IVALUE FROM INFO WHERE IKEY = 'HISTORY_ENABLED'", 0).equals("1"))
			{
				for (var trigger : CCDatabaseHistory.createTriggerStatements()) db.executeSQLThrow(trigger.Item2);
			}
		}
		db.executeSQLThrow("PRAGMA foreign_keys = ON;");
		db.executeSQLThrow("COMMIT TRANSACTION");

		db.executeSQLThrow("VACUUM");

		return new ArrayList<>();
	}
}
